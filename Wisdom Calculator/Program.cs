namespace Wisdom_Calculator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, int> _table = new Dictionary<int, int>
        {
            { 1, 150 },
            { 2, 300 },
            { 3, 450 },
            { 4, 600 },
            { 5, 750 },
            { 6, 1250 },
            { 7, 1750 },
            { 8, 2250 },
            { 9, 2750 },
            { 10, 3250 },
            { 11, 4000 },
            { 12, 4750 },
            { 13, 5500 },
            { 14, 6250 },
            { 15, 7000 },
            { 16, 10000 },
            { 17, 13000 },
            { 18, 16000 },
            { 19, 19000 },
            { 20, 22000 },
            { 21, 25000 },
            { 22, 28000 },
            { 23, 31000 },
            { 24, 34000 },
            { 25, 37000 },
            { 26, 40000 },
            { 27, 43000 },
            { 28, 46000 },
            { 29, 49000 },
            { 30, 52000 },
            { 31, 55500 },
            { 32, 59000 },
            { 33, 62500 },
            { 34, 66000 },
            { 35, 69500 },
            { 36, 73500 },
            { 37, 77500 },
            { 38, 81500 },
            { 39, 85500 },
            { 40, 89500 },
            { 41, 94000 },
            { 42, 98500 },
            { 43, 103000 },
            { 44, 107500 },
            { 45, 112000 },
            { 46, 117000 },
            { 47, 122000 },
            { 48, 127000 },
            { 49, 132000 },
            { 50, 137000 },
            { 51, 142500 },
            { 52, 148000 },
            { 53, 153500 },
            { 54, 159000 },
            { 55, 164500 },
            { 56, 170020 },
            { 57, 175562 },
            { 58, 181125 },
            { 59, 186710 },
            { 60, 192317 },
            { 61, 197948 },
            { 62, 203603 },
            { 63, 209283 },
            { 64, 214987 },
            { 65, 220718 },
            { 66, 226475 },
            { 67, 232259 },
            { 68, 238070 },
            { 69, 243910 },
            { 70, 249780 },
            { 71, 255679 },
            { 72, 261609 },
            { 73, 267570 },
            { 74, 273563 },
            { 75, 279589 },
            { 76, 285648 },
            { 77, 291742 },
            { 78, 297870 },
            { 79, 304035 },
            { 80, 310236 },
            { 81, 316474 },
            { 82, 322751 },
            { 83, 329066 },
            { 84, 335422 },
            { 85, 341818 },
            { 86, 348256 },
            { 87, 354736 },
            { 88, 361259 },
            { 89, 367827 },
            { 90, 374439 },
            { 91, 381098 },
            { 92, 387804 },
            { 93, 394557 },
            { 94, 401359 },
            { 95, 408210 },
            { 96, 415113 },
            { 97, 422066 },
            { 98, 429073 },
            { 99, 436132 },
            { 100, 443247 },
            { 101, 450416 },
            { 102, 457643 },
            { 103, 464927 },
            { 104, 472269 },
            { 105, 479671 },
            { 106, 487134 },
            { 107, 494658 },
            { 108, 502245 },
            { 109, 509896 },
            { 110, 517612 },
            { 111, 525394 },
            { 112, 533243 },
            { 113, 541161 },
            { 114, 549148 },
            { 115, 557205 },
            { 116, 565334 },
            { 117, 573536 },
            { 118, 581812 },
            { 119, 590163 },
            { 120, 598591 },
            { 121, 607096 },
            { 122, 615680 },
            { 123, 624344 },
            { 124, 633089 },
            { 125, 641917 },
            { 126, 650829 },
            { 127, 659825 },
            { 128, 668908 },
            { 129, 678079 },
            { 130, 687338 },
            { 131, 696687 },
            { 132, 706128 },
            { 133, 715662 },
            { 134, 725289 },
            { 135, 735013 },
            { 136, 744833 },
            { 137, 754751 },
            { 138, 764768 },
            { 139, 774887 },
            { 140, 785108 },
            { 141, 795433 },
            { 142, 805862 },
            { 143, 816399 },
            { 144, 827043 },
            { 145, 837796 },
            { 146, 848661 },
            { 147, 859638 },
            { 148, 870728 },
            { 149, 881934 },
            { 150, 893256 },
            { 151, 904697 },
            { 152, 916258 },
            { 153, 927940 },
            { 154, 939744 },
            { 155, 951673 },
            { 156, 963728 },
            { 157, 975911 },
            { 158, 988222 },
            { 159, 1000664 },
            { 160, 1013238 },
            { 161, 1025946 },
            { 162, 1038790 },
            { 163, 1051770 },
            { 164, 1064889 },
            { 165, 1078148 },
            { 166, 1091550 },
            { 167, 1105095 },
            { 168, 1118785 },
            { 169, 1132622 },
            { 170, 1146608 },
            { 171, 1160744 },
            { 172, 1175033 },
            { 173, 1189475 },
            { 174, 1204072 },
            { 175, 1218827 },
            { 176, 1233741 },
            { 177, 1248815 },
            { 178, 1264052 },
            { 179, 1279454 },
            { 180, 1295021 },
            { 181, 1310757 },
            { 182, 1326662 },
            { 183, 1342738 },
            { 184, 1358988 },
            { 185, 1375414 },
            { 186, 1392016 },
            { 187, 1408797 },
            { 188, 1425759 },
            { 189, 1442904 },
            { 190, 1460233 },
            { 191, 1477748 },
            { 192, 1495452 },
            { 193, 1513347 },
            { 194, 1531433 },
            { 195, 1549714 },
            { 196, 1568190 },
            { 197, 1586865 },
            { 198, 1605740 },
            { 199, 1624817 },
            { 200, 1644097 },
            { 201, 1663584 },
            { 202, 1683073 },
            { 203, 1702564 },
            { 204, 1722057 },
            { 205, 1741552 },
            { 206, 1761049 },
            { 207, 1780548 },
            { 208, 1800049 },
            { 209, 1819552 },
            { 210, 1839057 },
            { 211, 1858564 },
            { 212, 1878074 },
            { 213, 1897585 },
            { 214, 1917099 },
            { 215, 1936615 },
            { 216, 1956133 },
            { 217, 1975653 },
            { 218, 1995175 },
            { 219, 2014700 },
            { 220, 2034227 },
            { 221, 2053756 },
            { 222, 2073287 },
            { 223, 2092820 },
            { 224, 2112356 },
            { 225, 2131893 },
            { 226, 2151433 },
            { 227, 2170976 },
            { 228, 2190520 },
            { 229, 2210067 },
            { 230, 2229616 },
            { 231, 2249168 },
            { 232, 2268722 },
            { 233, 2288278 },
            { 234, 2307836 },
            { 235, 2327397 },
            { 236, 2346960 },
            { 237, 2366525 },
            { 238, 2386093 },
            { 239, 2405663 },
            { 240, 2425236 },
            { 241, 2444811 },
            { 242, 2464388 },
            { 243, 2483968 },
            { 244, 2503551 },
            { 245, 2523135 },
            { 246, 2542722 },
            { 247, 2562312 },
            { 248, 2581904 },
            { 249, 2601499 },
            { 250, 2621409 },
            { 251, 2641323 },
            { 252, 2661239 },
            { 253, 2681157 },
            { 254, 2701078 },
            { 255, 2721001 },
            { 256, 2740927 },
            { 257, 2760856 },
            { 258, 2780787 },
            { 259, 2800720 },
            { 260, 2820657 },
            { 261, 2840596 },
            { 262, 2860537 },
            { 263, 2880481 },
            { 264, 2900428 },
            { 265, 2920377 },
            { 266, 2940329 },
            { 267, 2960284 },
            { 268, 2980241 },
            { 269, 3000201 },
            { 270, 3020164 },
            { 271, 3040129 },
            { 272, 3060097 },
            { 273, 3080068 },
            { 274, 3100042 },
            { 275, 3120018 },
            { 276, 3139997 },
            { 277, 3159979 },
            { 278, 3179964 },
            { 279, 3199951 },
            { 280, 3219941 },
            { 281, 3239934 },
            { 282, 3259930 },
            { 283, 3279928 },
            { 284, 3299930 },
            { 285, 3319934 },
            { 286, 3339941 },
            { 287, 3359951 },
            { 288, 3379964 },
            { 289, 3399980 },
            { 290, 3419998 },
            { 291, 3440020 },
            { 292, 3460044 },
            { 293, 3480072 },
            { 294, 3500102 },
            { 295, 3520571 },
            { 296, 3541043 },
            { 297, 3561518 },
            { 298, 3581995 },
            { 299, 3602476 },
            { 300, 3622960 }};

            ConsoleColor[] colors = (ConsoleColor[])ConsoleColor.GetValues(typeof(ConsoleColor));

            while (true)
            {
                try
                {
                    /* Data gathering */
                    Console.Write("Current Wisdom Level: ");
                    int current = int.Parse(Console.ReadLine());
                    int wisdomNow = 0;
                    _table.TryGetValue(current, out wisdomNow);

                    Console.Write("Target Wisdom Level: ");
                    int target = int.Parse(Console.ReadLine());
                    int wisdomThen = 0;
                    _table.TryGetValue(target, out wisdomThen);

                    /* Computing */
                    int needed = wisdomThen - wisdomNow;
                    float percent = (float)wisdomNow / wisdomThen * 100f;
                    var oldColor = Console.ForegroundColor;
                    var color = percent > 80 ? colors[10] : percent > 40 ? colors[14] : colors[12];

                    /* Outputing */
                    Console.WriteLine(
                        "Current Wisdom level XP:\t" + wisdomNow + "\n" +
                        "Target Wisdom level XP:\t\t" + wisdomThen + "\n" +
                        "Wisdom to reach level:\t\t" + needed);
                    Console.Write("Progress on the way there:\t");
                    Console.ForegroundColor = color;
                    Console.WriteLine(percent);
                    Console.ForegroundColor = oldColor;

                    break;
                } catch { }
            }
            Console.Write("\nPress [enter] key to exit. ");
            Console.ReadLine();
        }
    }
}
